/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/resources/js/app.js":
/*!*********************************!*\
  !*** ./src/resources/js/app.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sass_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/style.scss */ \"./src/resources/sass/style.scss\");\n\n\nconst {\n  init\n} = __webpack_require__(/*! ./file-manager */ \"./src/resources/js/file-manager.js\");\n\nwindow.onload = init;\n\n//# sourceURL=webpack://file-manager/./src/resources/js/app.js?");

/***/ }),

/***/ "./src/resources/js/file-manager.js":
/*!******************************************!*\
  !*** ./src/resources/js/file-manager.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-use-before-define */\n\n/* eslint-disable operator-linebreak */\n\n/* eslint-disable no-restricted-syntax */\n\n/* eslint-disable no-console */\nconst Select2 = __webpack_require__(/*! ./select2 */ \"./src/resources/js/select2.js\");\n\nconst {\n  request,\n  truncate,\n  toast\n} = __webpack_require__(/*! ./utils */ \"./src/resources/js/utils.js\");\n\nconst {\n  templates\n} = __webpack_require__(/*! ./templates */ \"./src/resources/js/templates.js\");\n\nlet globalTags = [];\nlet globalTagsLastPage = 1;\nlet globalMediaTypes = [];\nlet modalShown = false;\nlet mediaList = [];\n\nconst toggleLoader = (prefix, show = true) => {\n  const container = document.querySelector(`${prefix}.selection-area`);\n\n  if (container) {\n    container.innerHTML = '';\n    const loader = document.querySelector(`${prefix}.media-loader`);\n    loader.classList.toggle('d-none', !show);\n  }\n};\n\nconst getSelectedTags = prefix => {\n  const tagsIds = [];\n  document.querySelectorAll(`${prefix} .selected .select-tag`).forEach(tagBtn => tagsIds.push(parseInt(tagBtn.dataset.tag, 10)));\n  return tagsIds;\n};\n\nconst toggleTagBtn = parent => {\n  const isSelected = Object.values(parent.classList).includes('selected');\n  parent.classList.toggle('selected', !isSelected);\n};\n\nconst getSelectedMedias = prefix => {\n  selectedMedias = [];\n  document.querySelectorAll(`${prefix}.selectable.ui-selected`).forEach(selectable => {\n    selectedMedias.push(selectable.dataset.file);\n  });\n  return selectedMedias;\n};\n\nconst initTagsModal = (prefix, title) => {\n  const modal = document.querySelector('#asign-tag-modal');\n  const selectedMedias = getSelectedMedias(prefix);\n\n  if (selectedMedias.length) {\n    modal.querySelector('.modal-title').textContent = title; // modal.querySelector('.modal-body').innerHTML = templates.tagsSelect(globalTags);\n\n    Select2.createAjaxField({\n      container: modal.querySelector('.modal-body'),\n      id: 'tags-modal-select',\n      name: 'tags',\n      label: 'tags',\n      url: '/admin/media/fetch/tags',\n      class: 'form-control tags-select'\n    });\n    Select2.initAjaxField('tags-modal-select');\n    $(modal).modal('show');\n    return modal;\n  }\n\n  toast(__('selectMediasFirst'), 'danger');\n  return modal;\n};\n\nconst initUnsignTag = prefix => {\n  // Asign Tag to medias\n  document.querySelector(`${prefix}#unsign-tag-button`).addEventListener('click', () => {\n    const modal = initTagsModal(prefix, __('removeTag'));\n    const saveBtn = $('#asign-tag-modal .modal-save');\n    saveBtn.off('click');\n    saveBtn.on('click', () => {\n      const tags = [modal.querySelector('.tags-select').value];\n      const unsignData = {\n        tags,\n        medias: selectedMedias\n      };\n      const formData = new FormData();\n      Object.entries(unsignData).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      fetch('/api/media/tag/unsign', {\n        method: 'POST',\n        body: formData\n      }).then(r => r.json()).then(response => {\n        if (response.data > 0) {\n          toast(__('tagsUnsigned'));\n          $(modal).modal('hide');\n        } else toast(__('tagsUnsignedError'), 'danger');\n      }).catch(e => console.log(e));\n    });\n  });\n};\n\nconst initAsignTag = prefix => {\n  // Asign Tag to medias\n  // console.log('initAsignTag')\n  $(`${prefix}#asign-tag-button`).off('click').on('click', () => {\n    const modal = initTagsModal(prefix, __('asignTag'));\n    const saveBtn = $('#asign-tag-modal .modal-save');\n    saveBtn.off('click');\n    saveBtn.on('click', () => {\n      const tags = [modal.querySelector('.tags-select').value];\n      const asignData = {\n        tags,\n        medias: selectedMedias\n      };\n      const formData = new FormData();\n      Object.entries(asignData).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      fetch('/api/media/tag', {\n        method: 'POST',\n        body: formData\n      }).then(r => r.json()).then(response => {\n        if (response.data) {\n          toast(__('tagsAsigned'));\n          $(modal).modal('hide');\n        } else toast(__('tagsAsignedError'), 'danger');\n      }).catch(e => console.log(e));\n    });\n  });\n};\n\nconst getMedias = (page = 1, tags = null, type = false, callback = false) => {\n  request(`/admin/media/fetch/media?page=${page}`, callback, 'POST', {\n    _token: document.querySelector('meta[name=csrf-token]').content,\n    tags,\n    type\n  });\n}; // const selectedMediaTemplate = media => {\n//   const description = media.media_content\n//     ? media.media_content.description\n//     : __('noDescription');\n//   return `\n//   <a\n//     href=\"#\"\n//     data-media=\"${media.id}\"\n//     class=\"selected-media list-group-item list-group-item-action flex-column align-items-start\">\n//     <div class=\"d-flex w-100 justify-content-between\">\n//       <div>\n//         <b class=\"mb-1 m-0\">\n//           ${media.media_content ? media.media_content.title : media.name}\n//         </b>\n//         </br>\n//         <small class=\"mb-1\">${description}</small>\n//       </div>\n//       <div>\n//         <img src=\"${media.media_content.preview}\">\n//       </div>\n//     </div>\n//   </a>\n// `;\n// };\n\n\nconst mediaItemTemplate = media => `\n  <div\n    title=\"${media.media_content.title}\" \n    class=\"selectable col-md-2 col-sm-3 m-1\" data-file=\"${media.id}\">\n    <img src=\"${media.media_content.preview}\">\n    <small>${truncate(media.media_content.title, 10)}</small>\n  </div>\n`;\n\nconst mediaUploadPromise = (media, metadata) => {\n  const formData = new FormData();\n  formData.append('media', media.media);\n  formData.append('cropped', media.cropped ? media.cropped : null);\n  formData.append('name', media.media.name);\n  Object.entries(metadata).forEach(([key, value]) => {\n    formData.append(key, value);\n  });\n  return fetch('/api/media/upload', {\n    method: 'POST',\n    body: formData\n  });\n};\n\nconst typesListTemplate = types => {\n  let typesList = '';\n  types.forEach(type => {\n    typesList += `<option value=\"${type.id}\">${type.name}</option>`;\n  });\n  return `\n  <div class=\"form-group\">\n    <label>${__('mediaType')}</label>\n    <select name=\"type\" class=\"form-control\">\n      ${typesList}\n    </select>\n  </div>`;\n};\n\nconst metadataFormTemplate = (types, i) => {\n  const select = `\n    <div id=\"select2-container-${i}\" class=\"form-group\">\n      \n    </div>\n  `;\n  return `\n  <form id=\"metadata-form-${i}\">\n    ${select}\n    <div class=\"form-group\">\n      <label>${__('title')}</label>\n      <input name=\"title\" type=\"text\" class=\"form-control\">\n    </div>\n    <div class=\"form-group\">\n      <label>${__('description')}</label>\n      <textarea name=\"description\" class=\"form-control\"></textarea>\n    </div>\n    ${typesListTemplate(types)}\n  </form>`;\n};\n\nconst cropImageTemplate = (media, i) => {\n  const tmpImg = document.createElement('img');\n  tmpImg.classList.add(`to_be_crop_${i}`);\n  tmpImg.style.maxWidth = '100%';\n  tmpImg.src = URL.createObjectURL(media);\n  const buttonConfirm = document.createElement('button');\n  buttonConfirm.textContent = 'Confirm';\n  buttonConfirm.classList = 'confirm-crop btn btn-default btn-sm';\n  buttonConfirm.id = `crop_btn_${i}`;\n  buttonConfirm.dataset.id = i;\n  return `\n  <div class=\"d-none\" id=\"imageCropper_${i}\">\n    ${buttonConfirm.outerHTML}\n    ${tmpImg.outerHTML}\n  </div>`;\n};\n\nconst renderUploadMediaList = (medias, types) => {\n  const mediasList = document.querySelector('#upload-modal .medias-list');\n  mediasList.innerHTML = '';\n  let i = 0;\n  medias.forEach(media => {\n    media = media.media;\n    let mediaTemplate = '';\n    let hasVideo = false;\n    let hasAudio = false;\n    const typesWithoutPreview = ['video/avi'];\n\n    if (typesWithoutPreview.includes(media.type)) {\n      mediaTemplate = `<small>${__('noPreview', [media.type])}</small>`;\n    } else if (/^image/.test(media.type)) {\n      if (media.type !== 'image/gif') {\n        const cropBtn = `\n          <button id=\"crop-btn-${i}\" class=\"form-control btn btn-default btn-sm crop-btn\" data-id=\"${i}\">\n            ${__('crop')}\n          </button>`;\n        mediaTemplate = `\n          <img\n            id=\"image-preview-${i}\" \n            class=\"w-100 my-3\"\n            src=\"${URL.createObjectURL(media)}\">\n          ${cropBtn}\n          <div class=\"mt-1\" id=\"crop_image_${i}\">\n            ${cropImageTemplate(media, i)}\n          </div>\n        `;\n      } else {\n        mediaTemplate = `\n          <img\n            id=\"image-preview-${i}\" \n            class=\"w-100 my-3\"\n            src=\"${URL.createObjectURL(media)}\">\n        `;\n      }\n    } else if (/^video/.test(media.type)) {\n      hasVideo = true;\n      mediaTemplate = `\n        <video controls id=\"video-preview-video-${i}\" class=\"w-100 my-3\">\n          <source id=\"video-preview-source-${i}\" src=\"\">\n          Your browser does not support the video tag.\n        </video>`;\n    } else if (/^audio/.test(media.type)) {\n      hasAudio = true;\n      mediaTemplate = `\n      <audio class=\"w-100 my-3\" id=\"audio-preview-audio-${i}\" controls>\n        <source src=\"\" id=\"audio-preview-source-${i}\" />\n      </audio>`;\n    }\n\n    let mediaSize = media.size;\n    let unit = '';\n    let j = 0;\n    const units = ['KB', 'MB', 'GB'];\n\n    while (mediaSize > 1024 && j < units.length) {\n      mediaSize = Math.round(mediaSize / 1024);\n      unit = units[j];\n      j += 1;\n    }\n\n    mediasList.innerHTML += `\n      <div class=\"card file-row\" data-name=\"${media.name}\">\n        <div class=\"card-header\" id=\"heading_${i}\">\n          <h5 class=\"mb-0\" style=\"text-align:center\">\n            <button\n              class=\"btn btn-link\"\n              data-toggle=\"collapse\"\n              data-target=\"#collapse_${i}\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapse_${i}\"\n              title=\"${media.name}\"\n            >\n            <b>${truncate(media.name, 25)}</b> ${mediaSize} ${unit}\n            <span class=\"loader-container\"></span>\n            </button>\n            <a href=\"#\" style=\"float:right\" class=\"text-danger\">\n              <i\n                style=\"vertical-align:middle\"\n                data-name=\"${media.name}\"\n                class=\"remove-media-btn las la-trash-alt\">\n              </i>\n            </a>\n          </h5>\n        </div>\n        <div\n          id=\"collapse_${i}\" \n          class=\"collapse ${i === 0 ? 'show' : ''}\"\n          aria-labelledby=\"heading_${i}\"\n          data-parent=\"#accordion\">   \n          <div class=\"card-body\">\n            ${mediaTemplate}\n            ${metadataFormTemplate(types, i)}\n          </div>\n        </div>\n      </div>`;\n\n    if (hasVideo) {\n      const reader = new FileReader();\n      const x = i;\n\n      reader.onloadend = () => {\n        const video = document.querySelector(`#video-preview-video-${x}`);\n        video.src = reader.result;\n      };\n\n      reader.readAsDataURL(media);\n    }\n\n    if (hasAudio) {\n      document.querySelector(`#audio-preview-source-${i}`).src = URL.createObjectURL(media);\n      document.querySelector(`#audio-preview-audio-${i}`).load();\n    }\n\n    Select2.createGroupedField({\n      container: document.querySelector(`#select2-container-${i}`),\n      name: 'parentId',\n      label: 'Parent',\n      url: '/api/media/parent',\n      class: 'form-control'\n    });\n    i += 1;\n  });\n  Select2.initGroupedFields();\n};\n\nconst initSelectedMediasEdition = (prefix, medias, type) => {\n  document.querySelectorAll(`${prefix}.selected-media`).forEach(element => {\n    element.addEventListener('click', e => {\n      const mediaId = e.currentTarget.dataset.media;\n      const [media] = medias.filter(m => String(m.id) === mediaId);\n      const modal = document.querySelector('#edit-media-modal');\n      modal.querySelector('.modal-body').innerHTML = metadataFormTemplate(globalMediaTypes, media.id);\n      modal.querySelector('.modal-save').innerHTML = 'Save';\n      const parentField = modal.querySelector('select[name=\"parentId\"]');\n\n      if (parentField !== null) {\n        parentField.value = media ? media.parent_id : '';\n      }\n\n      const titleField = modal.querySelector('input[name=\"title\"]');\n      titleField.value = media.media_content ? media.media_content.title : '';\n      const descriptionField = modal.querySelector('textarea[name=\"description\"]');\n      descriptionField.value = media.media_content ? media.media_content.description : '';\n      modal.querySelector('.modal-save').addEventListener('click', () => {\n        const mediaData = {\n          title: modal.querySelector('input[name=\"title\"]').value,\n          description: modal.querySelector('textarea[name=\"description\"]').value\n        };\n\n        if (parentField !== null) {\n          mediaData.parent = modal.querySelector('select[name=\"parentId\"]').value;\n        }\n\n        const formData = new FormData();\n        Object.entries(mediaData).forEach(([key, value]) => {\n          formData.append(key, value);\n        });\n        fetch(`/api/media/${media.media_content.id}/edit`, {\n          method: 'POST',\n          body: formData\n        }).then(r => r.json()).then(data => {\n          modal.querySelectorAll('small.text-danger').forEach(err => err.remove());\n\n          if (!data.errors && data.data.updated) {\n            document.querySelector(`${prefix}.selected-media[data-media=\"${media.id}\"]`).outerHTML = templates.selectedMedia(data.data.media);\n            modal.querySelector('.modal-save').innerHTML = '<span class=\"modal-loader la la-spinner la-spin\"></span>';\n            toggleLoader(prefix, true);\n            getMedias(1, '', type, medias1 => {\n              initSelectedMediasEdition(prefix, medias1.data, type); // eslint-disable-next-line no-use-before-define\n\n              renderMediasTable(medias1, prefix, type);\n              $(modal).modal('hide');\n              toast(__('mediaUpdated'));\n            });\n          } else {\n            Object.entries(data.errors).forEach(([name, errors]) => {\n              const field = modal.querySelector(`input[name=\"${name}\"], textarea[name=\"${name}\"], select[name=\"${name}\"]`);\n              errors.forEach(error => {\n                field.parentElement.innerHTML += `<small class=\"text-danger\">${error}</small>`;\n              });\n            });\n          }\n        });\n      });\n      $(modal).modal('show');\n    });\n  });\n};\n\nconst initSelection = (medias, prefix, type) => {\n  $('.selection-area').selectable();\n\n  if (prefix !== '') {\n    document.querySelector(`${prefix}#selectFilesBtn`).addEventListener('click', () => {\n      const selectedMedias = getSelectedMedias(prefix);\n      document.querySelector(`${prefix} .selected-medias-input`).value = JSON.stringify({\n        medias: selectedMedias\n      });\n      const selectedMediasContainer = document.querySelector(`${prefix}.selected-medias-list`);\n      selectedMediasContainer.innerHTML = '';\n      document.querySelector(`${prefix}.selected-medias-number`).innerHTML = `${selectedMedias.length}`;\n\n      if (selectedMedias.length > 0) {\n        console.log(selectedMedias);\n        console.log({\n          medias\n        });\n        medias.forEach(media => {\n          if (selectedMedias.includes(String(media.id))) {\n            console.log('Match', String(media.id));\n            selectedMediasContainer.innerHTML += templates.selectedMedia(media);\n          }\n        });\n        initSelectedMediasEdition(prefix, medias, type);\n      } else {\n        selectedMediasContainer.innerHTML = `\n            <li class=\"list-group-item\">\n              <small>${__('noMediasSelected')}</small>\n            </li>\n          `;\n      }\n    });\n  }\n};\n\nconst initScroll = (container, lastPage, prefix = '', type) => {\n  let page = 1;\n  let isLoading = false;\n  $(container).off('scroll');\n  $(container).on('scroll', () => {\n    if (container.offsetHeight + container.scrollTop >= container.scrollHeight - 1) {\n      if (!isLoading && page + 1 <= lastPage) {\n        page += 1;\n        isLoading = true;\n        container.innerHTML += `\n        <div class=\"pagination-loader col-sm-12 d-flex justify-content-center m-0\">\n          <h4><span class=\"la la-spinner la-spin mt-3\"></span></h4>\n        </div>`;\n        getMedias(page, getSelectedTags(prefix), type, mediasResponse => {\n          container.querySelector('.pagination-loader').remove();\n          const medias = mediasResponse.data;\n          medias.forEach(media => {\n            container.innerHTML += mediaItemTemplate(media);\n          });\n          isLoading = false; // if (prefix !== '') initSelection(medias, prefix, type);\n        });\n      }\n    }\n  });\n};\n\nconst renderMediasTable = (medias, prefix, type = false) => {\n  toggleLoader(prefix, false);\n  const container = document.querySelector(`${prefix} .custom-file-manager .list`);\n  container.innerHTML = '';\n\n  if (medias.data.length) {\n    medias.data.forEach(media => {\n      // const tags = globalTags.filter(tag => media.tags.includes(tag.id));\n      container.innerHTML += mediaItemTemplate(media);\n      initScroll(container, medias.last_page, prefix, type);\n      initSelection(medias.data, prefix, type);\n    });\n  } else {\n    container.innerHTML = `\n    <tr>\n      <td class=\"empty\" colspan=\"6\">${__('noMediasFound')}</td>\n    </tr>`;\n  }\n};\n\nconst initRefresh = (prefix = '', type = false) => {\n  document.querySelector(`${prefix}#refreshBtn`).addEventListener('click', () => {\n    toggleLoader(prefix, true);\n    getMedias(1, '', type, medias => {\n      renderMediasTable(medias, prefix, type);\n    });\n  });\n};\n\nconst initTags = (prefix = '', type = false) => {\n  const tagsContainer = document.querySelector(`${prefix}.tags-container ul`);\n  tagsContainer.innerHTML = '';\n  globalTags.forEach(tag => {\n    tagsContainer.innerHTML += `\n      <li class=\"list-group-item\">\n        <a href=\"#\" title=\"${tag.name}\" class=\"select-tag\" data-tag=\"${tag.id}\">\n          ${truncate(tag.name, 10)}\n        </a>\n      </li>\n    `;\n  });\n  initTagsPagination(tagsContainer.parentElement, globalTagsLastPage);\n  initAsignTag(prefix);\n  initUnsignTag(prefix); // Toggle and refresh media list (filter by tag)\n\n  document.querySelectorAll(`${prefix}.select-tag`).forEach(tagBtn => {\n    tagBtn.addEventListener('click', e => {\n      toggleTagBtn(e.currentTarget.parentNode);\n      const selectedTags = getSelectedTags(prefix);\n      toggleLoader(prefix, true);\n      getMedias(1, selectedTags, type, medias => {\n        renderMediasTable(medias, prefix);\n      });\n    });\n  });\n};\n\nconst initTagsPagination = (container, lastPage) => {\n  let page = 1;\n  let isLoading = false;\n  $(container).off('scroll');\n  $(container).on('scroll', () => {\n    if (container.offsetHeight + container.scrollTop >= container.scrollHeight - 1) {\n      if (!isLoading && page + 1 <= lastPage) {\n        page += 1;\n        isLoading = true;\n        container.innerHTML += '<span class=\"w-100 text-center tags-loader la la-spinner la-spin mt-3\"></span>';\n        getTags(page, ({\n          data\n        }) => {\n          document.querySelector('.tags-loader').remove();\n          data.forEach(tag => {\n            container.querySelector('ul').innerHTML += `\n              <li class=\"list-group-item\">\n                <a href=\"#\" title=\"${tag.name}\" class=\"select-tag\" data-tag=\"${tag.id}\">\n                  ${truncate(tag.name, 10)}\n                </a>\n              </li>\n            `;\n          });\n          isLoading = false;\n        });\n      }\n    }\n  });\n};\n\nconst getTags = (page = 1, callback = false) => {\n  request(`/admin/media/fetch/tags?page=${page}`, callback, 'POST', {\n    _token: document.querySelector('meta[name=csrf-token]').content\n  });\n};\n\nconst initCropper = i => {\n  const imgTobeCrop = document.querySelector(`.to_be_crop_${i}`);\n  const ImgCrop = new Cropper(imgTobeCrop, {\n    aspectRatio: '1/1'\n  });\n  const buttonConfirm = document.querySelector(`#crop_btn_${i}`);\n  buttonConfirm.addEventListener('click', () => {\n    const canvas = ImgCrop.getCroppedCanvas();\n\n    if (canvas !== null) {\n      canvas.toBlob(blob => {\n        blob.lastModifiedDate = new Date();\n        blob.lastModified = new Date();\n        const croppedImage = new File([blob], mediaList[i].media.name, {\n          type: blob.type\n        });\n        mediaList[i].media = croppedImage;\n        document.querySelector(`#image-preview-${i}`).src = URL.createObjectURL(croppedImage);\n        $(`#crop-btn-${i}`).click();\n        toast(__('imageCropped'));\n      });\n    }\n  });\n};\n\nconst initUploadModal = (medias, types) => {\n  const titleSpan = document.querySelector('#upload-modal .modal-title span');\n  const button = document.querySelector('#upload-modal .modal-save');\n  const buttonSpan = button.querySelector('span');\n  const totalMedias = medias.length;\n  renderUploadMediaList(medias, types);\n  button.classList.remove('d-none');\n  titleSpan.innerHTML = totalMedias;\n  buttonSpan.innerHTML = totalMedias;\n  const removeMediaBtns = document.querySelectorAll('.remove-media-btn');\n  removeMediaBtns.forEach(removeBtn => {\n    removeBtn.addEventListener('click', e => {\n      const mediaName = e.target.dataset.name;\n      medias = medias.filter(media => media.media.name !== mediaName);\n      initUploadModal(medias, types);\n    });\n  });\n  $('#upload-modal .modal-save').off('click').on('click', e => {\n    e.currentTarget.classList.add('d-none');\n    const promises = [];\n    const promiseResponses = [];\n    let i = 0;\n    const fileNames = document.querySelectorAll('span.loader-container');\n    fileNames.forEach(fileName => {\n      fileName.innerHTML += '<span class=\"ml-2 la la-spinner la-spin\"></span>';\n    });\n    medias.forEach(media => {\n      const metadataFields = document.querySelectorAll(`#metadata-form-${i} .form-control`);\n      const metadata = {};\n      metadataFields.forEach(field => metadata[field.name] = field.value);\n      const parentSelect = document.querySelector(`#metadata-form-${i} select[name=\"parentId\"]`);\n\n      if (parentSelect !== null) {\n        const dataAttrs = $(parentSelect).find(':selected').data();\n\n        if (dataAttrs !== undefined) {\n          metadata.parent_model = dataAttrs.namespace;\n          metadata.parent_id = parentSelect.value;\n        }\n      }\n\n      promises.push(mediaUploadPromise(media, metadata));\n      i += 1;\n    });\n    Promise.all(promises).then(responses => {\n      responses.forEach(response => {\n        if (response.ok) {\n          promiseResponses.push(response.json());\n        }\n      });\n    }, e1 => console.log(e1)).then(() => {\n      Promise.all(promiseResponses).then(responses => {\n        responses.forEach(response => {\n          const fileRow = document.querySelector(`.file-row[data-name=\"${response.data.filename}\"]`);\n          document.querySelectorAll('small.text-danger').forEach(err => err.remove());\n\n          if (!response.errors) {\n            const {\n              msg,\n              success\n            } = response.data;\n            const fileLoader = fileRow.querySelector('span.loader-container');\n            fileLoader.classList.value = 'ml-2';\n            fileLoader.innerHTML = success ? '✅' : '❌';\n            const textClass = success ? 'success' : 'danger';\n            fileRow.querySelector('.card-header').innerHTML += `\n                  <p\n                    class=\"mt-2 mb-0 text-${textClass} text-center\">\n                    ${msg}\n                  </p>\n                `;\n          } else if (fileRow) {\n            Object.entries(response.errors).forEach(([name, errors]) => {\n              const field = fileRow.querySelector(`input[name=\"${name}\"], select[name=\"${name}\"]`);\n              errors.forEach(error => {\n                field.parentElement.innerHTML += `<small class=\"text-danger\">${error}</small>`;\n              });\n            });\n            const fileLoader = fileRow.querySelector('span.loader-container');\n            fileLoader.innerHTML = '❌';\n            fileRow.querySelector('.card-header').innerHTML += `\n                  <p class=\"mt-2 mb-0 text-danger text-center\">\n                    ${__('invalidMetadata')}\n                  </p>\n                `;\n            $(fileRow).find('.collapse').collapse('show');\n          }\n        });\n      });\n    });\n  });\n  $('.crop-btn').off('click').on('click', e1 => {\n    const i1 = e1.target.dataset.id;\n    const imageCropper = document.querySelector(`#imageCropper_${i1}`);\n    initCropper(i1);\n\n    if (Object.values(imageCropper.classList).includes('d-none')) {\n      imageCropper.classList.remove('d-none');\n    } else {\n      imageCropper.classList.add('d-none');\n    }\n  });\n};\n\nconst initUploadModalHandler = (prefix = '', type = false) => {\n  const uploadModal = $('#upload-modal');\n  uploadModal.on('shown.bs.modal', () => {\n    initUploadModal(mediaList, globalMediaTypes);\n  });\n  uploadModal.on('hidden.bs.modal', () => {\n    modalShown = false; // Refresh After Upload\n\n    toggleLoader(prefix, true);\n    getMedias(1, '', type, medias => {\n      renderMediasTable(medias, prefix, type);\n    });\n  });\n};\n\nconst initUpload = prefix => {\n  const hiddenInput = document.querySelector(`${prefix} #upload-field`);\n  const uploadButton = document.querySelector(`${prefix} #upload-button`);\n  const uploadModal = $('#upload-modal');\n\n  const uploadClickListener = () => {\n    hiddenInput.value = '';\n    hiddenInput.click();\n  };\n\n  $(uploadButton).off('click');\n  $(uploadButton).on('click', uploadClickListener);\n  hiddenInput.addEventListener('change', () => {\n    mediaList = [];\n    hiddenInput.files.forEach(media => {\n      mediaList.push({\n        media,\n        cropped: null\n      });\n    });\n\n    if (!modalShown) {\n      uploadModal.modal('show');\n      modalShown = true;\n    }\n  });\n};\n\nconst initMediaButton = prefix => {\n  const buttonContainer = document.querySelector(`${prefix}.browse-media-btn-container`);\n  const button = buttonContainer.querySelector('.filemanager-toggle');\n  const loader = buttonContainer.querySelector('.la-spinner');\n  button.disabled = false;\n  loader.remove();\n};\n\nconst initMediaField = (medias, prefix, type) => {\n  renderMediasTable(medias, prefix, type);\n  initSelectedMediasEdition(prefix, medias.data, type);\n  const loadedEvent = new Event('medias-loaded');\n  document.querySelector(`${prefix} #filemanager-container`).dispatchEvent(loadedEvent);\n  initTags(prefix, type);\n  initRefresh(prefix, type);\n  initUpload(prefix);\n  initUploadModalHandler(prefix, type);\n  initMediaButton(prefix);\n};\n\nconst onMediaLoadedSingle = medias => {\n  renderMediasTable(medias, '');\n  initTags();\n  initRefresh();\n  initUpload('');\n  initUploadModalHandler();\n};\n\nconst setGlobals = ({\n  data\n}) => {\n  const {\n    tags,\n    types\n  } = data;\n  globalTags = tags.data;\n  globalTagsLastPage = tags.last_page;\n  globalMediaTypes = types.data;\n};\n\nconst onGlobalsLoaded = response => {\n  setGlobals(response); // Render upload modal\n\n  const modalTemplate = document.querySelector('template.upload-modal');\n  const node = modalTemplate.content.cloneNode(true);\n  document.body.appendChild(node); // Init each field\n\n  const fileManagerFields = document.querySelectorAll('.filemanager-field.modal-dialog');\n\n  if (fileManagerFields.length) {\n    fileManagerFields.forEach(fileManagerField => {\n      const name = fileManagerField !== null ? fileManagerField.getAttribute('name') : false;\n      const prefix = name ? `.filemanager-field[name=\"${name}\"] ` : '';\n      const {\n        type\n      } = fileManagerField.dataset;\n      getMedias(1, '', type, medias => {\n        initMediaField(medias, prefix, type);\n      });\n    });\n  } else {\n    getMedias(1, '', false, medias => {\n      onMediaLoadedSingle(medias);\n    });\n  }\n};\n\nconst init = () => {\n  loadGlobals(onGlobalsLoaded);\n};\n\nconst loadGlobals = (callback = false) => {\n  toggleLoader('', true);\n  request('/admin/media/fetch/global-data', callback, 'POST');\n};\n\nmodule.exports = {\n  init\n};\n\n//# sourceURL=webpack://file-manager/./src/resources/js/file-manager.js?");

/***/ }),

/***/ "./src/resources/js/select2.js":
/*!*************************************!*\
  !*** ./src/resources/js/select2.js ***!
  \*************************************/
/***/ ((module) => {

eval("/* eslint-disable no-use-before-define */\nconst createGroupedField = options => {\n  const fieldHtml = generateFieldHtml(options, 'select2-grouped');\n  options.container.innerHTML += fieldHtml;\n};\n\nconst createAjaxField = options => {\n  const fieldHtml = generateFieldHtml(options, 'select2-ajax');\n  options.container.innerHTML = fieldHtml;\n};\n\nconst generateFieldHtml = (options, fieldType) => {\n  const html = `\n    <label>${options.label}</label>\n    <select\n      ${options.id !== undefined ? `id=\"${options.id}\"` : ''}\n      name=\"${options.name}\"\n      style=\"${options.style || 'width:100%'}\"\n      class=\"${options.class || 'form-control'} ${fieldType}\"\n      data-url=\"${options.url}\"\n    >\n    </select>`;\n  return html;\n};\n\nconst initAjaxField = id => {\n  const field = document.querySelector(`#${id}`);\n  const {\n    url\n  } = field.dataset;\n  $(field).select2({\n    theme: 'bootstrap',\n    multiple: false,\n    ajax: {\n      url,\n      type: 'POST',\n      dataType: 'json',\n      data: params => {\n        const query = {\n          search: params.term,\n          page: params.page || 1\n        };\n        return query;\n      },\n\n      processResults({\n        data,\n        current_page,\n        last_page\n      }) {\n        const results = [];\n        Object.values(data).forEach(tag => {\n          // console.log(tag)\n          results.push({\n            id: tag.id,\n            text: tag.name\n          });\n        });\n        more = current_page < last_page;\n        console.log({\n          results,\n          pagination: {\n            more\n          }\n        });\n        return {\n          results,\n          pagination: {\n            more\n          }\n        };\n      }\n\n    }\n  });\n};\n\nconst initGroupedFields = () => {\n  document.querySelectorAll('.select2-grouped').forEach(selectElement => {\n    const {\n      url\n    } = selectElement.dataset;\n    const finished = [];\n    $(selectElement).select2({\n      theme: 'bootstrap',\n      multiple: false,\n      ajax: {\n        url,\n        type: 'GET',\n        dataType: 'json',\n        data: params => {\n          const query = {\n            search: params.term,\n            page: params.page || 1\n          };\n          return query;\n        },\n\n        processResults({\n          data\n        }) {\n          const parentsNumber = Object.keys(data).length;\n          const results = [];\n          let more;\n\n          if (parentsNumber > 1) {\n            Object.entries(data).forEach(([namespace, response]) => {\n              if (response.current_page === response.last_page) {\n                finished.push(namespace);\n              }\n\n              if (response.data.length) {\n                results.push({\n                  text: namespace.split('\\\\').pop(),\n                  children: Object.values(response.data).map(entry => ({\n                    id: entry.id,\n                    text: entry.name,\n                    namespace\n                  }))\n                });\n              }\n            });\n            more = finished.length < parentsNumber;\n          } else {\n            Object.entries(data).forEach(([namespace, response]) => {\n              Object.values(response.data).forEach(entry => {\n                results.push({\n                  id: entry.id,\n                  text: entry.name,\n                  namespace\n                });\n              });\n              more = response.current_page < response.last_page;\n            });\n          }\n\n          return {\n            results,\n            pagination: {\n              more\n            }\n          };\n        }\n\n      }\n    }).on('select2:select', e => {\n      const {\n        data\n      } = e.params;\n      $(e.currentTarget).children()[0].dataset.namespace = data.namespace;\n    });\n  });\n};\n\nmodule.exports = {\n  createGroupedField,\n  initGroupedFields,\n  createAjaxField,\n  initAjaxField\n};\n\n//# sourceURL=webpack://file-manager/./src/resources/js/select2.js?");

/***/ }),

/***/ "./src/resources/js/templates.js":
/*!***************************************!*\
  !*** ./src/resources/js/templates.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-use-before-define */\nconst {\n  truncate\n} = __webpack_require__(/*! ./utils */ \"./src/resources/js/utils.js\");\n\nconst mediaItem = media => `\n<div\n  title=\"${media.media_content.title}\" \n  class=\"ui-widget-content selectable col-md-2 col-sm-3 m-1\" data-file=\"${media.id}\"\n>\n  <img src=\"${media.media_content.preview}\">\n  <small>${truncate(media.media_content.title, 10)}</small>\n</div>\n`;\n\nconst paginationLoader = () => `\n<div class=\"pagination-loader col-sm-12 d-flex justify-content-center m-0\">\n  <h4><span class=\"la la-spinner la-spin mt-3\"></span></h4>\n</div>`;\n\nconst noMediasFound = () => '<p>No Medias Found<p>';\n\nconst tagItem = tag => `\n<li class=\"list-group-item\">\n  <a href=\"#\" title=\"${tag.name}\" class=\"select-tag\" data-tag=\"${tag.id}\">\n    ${truncate(tag.name, 10)}\n  </a>\n</li>\n`;\n\nconst noTagsFound = () => '<li  class=\"list-group-item\">No Tags</li>';\n\nconst tagsSelectOptions = tags => tags.map(tag => `\n  <option value=\"${tag.id}\">\n    ${tag.name}\n  </option>\n`);\n\nconst tagsSelect = tags => {\n  const options = tagsSelectOptions(tags);\n  return `\n  <select name=\"tags\" class=\"tags-select form-control\">\n  ${options}\n  </select>`;\n};\n\nconst tagsLoader = () => '<span class=\"w-100 text-center tags-loader la la-spinner la-spin mt-3\"></span>';\n\nconst uploadModalTitle = length => `\n  Uploading <span class=\"medias-count\">${length}</span> medias\n`;\n\nconst uploadPreview = (file, i, types) => {\n  const {\n    media\n  } = file;\n  const mediaPreviewTemplate = mediaPreview(media, i);\n  const metadataFormTemplate = metadataForm(i, types);\n  let mediaSize = media.size;\n  let unit = '';\n  let j = 0;\n  const units = ['KB', 'MB', 'GB'];\n\n  while (mediaSize > 1024 && j < units.length) {\n    mediaSize = Math.round(mediaSize / 1024);\n    unit = units[j];\n    j += 1;\n  }\n\n  return `\n    <div class=\"card file-row\" data-name=\"${media.name}\">\n      <div class=\"card-header\" id=\"heading_${i}\">\n        <h5 class=\"mb-0\" style=\"text-align:center\">\n          <button\n            class=\"btn btn-link\"\n            data-toggle=\"collapse\"\n            data-target=\"#collapse_${i}\"\n            aria-expanded=\"true\"\n            aria-controls=\"collapse_${i}\"\n            title=\"${media.name}\"\n          >\n          <b>${truncate(media.name, 25)}</b> ${mediaSize} ${unit}\n          <span class=\"loader-container\"></span>\n          </button>\n          <a href=\"#\" style=\"float:right\" class=\"text-danger\">\n            <i\n              style=\"vertical-align:middle\"\n              data-name=\"${media.name}\"\n              class=\"remove-media-btn las la-trash-alt\">\n            </i>\n          </a>\n        </h5>\n      </div>\n      <div\n        id=\"collapse_${i}\" \n        class=\"collapse ${i === 0 ? 'show' : ''}\"\n        aria-labelledby=\"heading_${i}\"\n        data-parent=\"#accordion\">   \n        <div class=\"card-body\">\n          ${mediaPreviewTemplate}\n          ${metadataFormTemplate}\n        </div>\n      </div>\n    </div>\n  `;\n};\n\nconst metadataForm = (i, types) => {\n  const typesListTemplate = typesList(types);\n  const select = `\n    <div id=\"select2-container-${i}\" class=\"form-group\">\n      \n    </div>\n  `;\n  return `\n    <form id=\"metadata-form-${i}\">\n      ${select}\n      <div class=\"form-group\">\n        <label>Title</label>\n        <input name=\"title\" type=\"text\" class=\"form-control\">\n      </div>\n      <div class=\"form-group\">\n        <label>Description</label>\n        <textarea name=\"description\" class=\"form-control\"></textarea>\n      </div>\n      ${typesListTemplate}\n    </form>`;\n};\n\nconst typesList = types => {\n  let list = '';\n  types.forEach(type => {\n    list += `<option value=\"${type.id}\">${type.name}</option>`;\n  });\n  return `\n  <div class=\"form-group\">\n    <label>Media Type</label>\n    <select name=\"type\" class=\"form-control\">\n      ${list}\n    </select>\n  </div>`;\n};\n\nconst mediaPreview = (media, i) => {\n  const {\n    type\n  } = media;\n  const typesWithoutPreview = ['video/avi'];\n  let template = '';\n\n  if (typesWithoutPreview.includes(type)) {\n    template = noPreview(type);\n  } else if (/^image/.test(type)) {\n    template = imagePreview(media, i);\n  } else if (/^video/.test(type)) {\n    template = videoPreview(i);\n  } else if (/^audio/.test(type)) {\n    template = audioPreview(i);\n  }\n\n  return template;\n};\n\nconst noPreview = type => `\n  <small>No preview available for type ${type}</small>\n`;\n\nconst imagePreview = (media, i) => {\n  const uncropableTypes = ['image/gif'];\n  let cropTemplate = '';\n\n  if (!uncropableTypes.includes(media.type)) {\n    cropTemplate = `\n    <button id=\"crop-btn-${i}\" class=\"form-control btn btn-default btn-sm crop-btn\" data-id=\"${i}\">\n      Crop\n    </button>\n    <div class=\"mt-1\" id=\"crop_image_${i}\">\n      ${cropImageTemplate(media, i)}\n    </div>\n    `;\n  }\n\n  return `\n    <img\n      id=\"image-preview-${i}\" \n      class=\"w-100 my-3\"\n      src=\"${URL.createObjectURL(media)}\"\n    >\n    ${cropTemplate}\n  `;\n};\n\nconst cropImageTemplate = (media, i) => {\n  const tmpImg = document.createElement('img');\n  tmpImg.classList.add(`to_be_crop_${i}`);\n  tmpImg.style.maxWidth = '100%';\n  tmpImg.src = URL.createObjectURL(media);\n  const buttonConfirm = document.createElement('button');\n  buttonConfirm.textContent = 'Confirm';\n  buttonConfirm.classList = 'confirm-crop btn btn-default btn-sm';\n  buttonConfirm.id = `crop_btn_${i}`;\n  buttonConfirm.dataset.id = i;\n  return `\n  <div class=\"d-none\" id=\"imageCropper_${i}\">\n    ${buttonConfirm.outerHTML}\n    ${tmpImg.outerHTML}\n  </div>`;\n};\n\nconst videoPreview = i => `\n<video controls id=\"video-preview-video-${i}\" class=\"w-100 my-3\">\n  <source id=\"video-preview-source-${i}\" src=\"\">\n  Your browser does not support the video tag.\n</video>`;\n\nconst audioPreview = i => `\n<audio class=\"w-100 my-3\" id=\"audio-preview-audio-${i}\" controls>\n  <source src=\"\" id=\"audio-preview-source-${i}\" />\n</audio>`;\n\nconst uploadFeedback = (msg, textClass) => `\n<p\n  class=\"mt-2 mb-0 text-${textClass} text-center\">\n  ${msg}\n</p>`;\n\nconst selectedMedia = ({\n  media_content,\n  name,\n  id\n}) => {\n  const description = media_content ? media_content.description : __('noDescription');\n  return `\n  <a\n    href=\"#\"\n    data-media=\"${id}\"\n    class=\"selected-media list-group-item list-group-item-action flex-column align-items-start\">\n    <div class=\"d-flex w-100 justify-content-between\">\n      <div>\n        <b class=\"mb-1 m-0\">\n          ${media_content ? media_content.title : name}\n        </b>\n        </br>\n        <small class=\"mb-1\">${description}</small>\n      </div>\n      <div class=\"selected-media-preview\">\n        <img src=\"${media_content.preview}\">\n      </div>\n    </div>\n  </a>\n`;\n};\n\nmodule.exports = {\n  templates: {\n    mediaItem,\n    paginationLoader,\n    noMediasFound,\n    tagItem,\n    noTagsFound,\n    tagsSelectOptions,\n    tagsSelect,\n    tagsLoader,\n    uploadModalTitle,\n    mediaPreview,\n    noPreview,\n    imagePreview,\n    videoPreview,\n    audioPreview,\n    uploadPreview,\n    uploadFeedback,\n    metadataForm,\n    selectedMedia\n  }\n};\n\n//# sourceURL=webpack://file-manager/./src/resources/js/templates.js?");

/***/ }),

/***/ "./src/resources/js/utils.js":
/*!***********************************!*\
  !*** ./src/resources/js/utils.js ***!
  \***********************************/
/***/ ((module) => {

eval("/* eslint-disable no-restricted-syntax */\n\n/* eslint-disable no-console */\nconst request = (endpoint, callback, method = 'GET', data = false, headers = false, err = false) => {\n  const head = new Headers();\n\n  if (headers) {\n    Object.entries(headers).forEach(([key, val]) => head.append(key, val));\n  } else {\n    head.append('Accept', 'application/json');\n  }\n\n  let formData = null;\n\n  if (data) {\n    formData = new FormData();\n\n    for (const [key, value] of Object.entries(data)) {\n      if (key && value) {\n        if (typeof value === 'object') {\n          // Array\n          if (Array.isArray(value)) {\n            for (const [, subValue] of Object.entries(value)) {\n              formData.append(`${key}[]`, subValue);\n            }\n          } else if (value instanceof File) {\n            // Object\n            formData.append(key, value);\n          } else {\n            formData.append(key, JSON.stringify(value));\n          }\n        } else {\n          // Default\n          formData.append(key, value);\n        }\n      }\n    }\n  }\n\n  if (method.toLowerCase() === 'post') {\n    let csrfToken = false;\n    const csrfTokenElement = document.querySelector('meta[name=csrf-token]');\n\n    if (csrfTokenElement !== undefined) {\n      csrfToken = csrfTokenElement.content;\n    }\n\n    if (csrfToken) {\n      if (formData === null) formData = new FormData();\n      formData.append('_token', csrfToken);\n    }\n  }\n\n  fetch(document.location.origin + endpoint, {\n    method,\n    headers: head,\n    body: formData\n  }).then(response => response.json()).then(result => callback(result)).catch(e => err ? err(e) : console.error(e));\n};\n\nconst truncate = (str, length, ending = '...') => {\n  if (str.length > length) {\n    return str.substring(0, length - ending.length) + ending;\n  }\n\n  return str;\n};\n\nconst toast = (text, type = 'success') => {\n  new Noty({\n    type,\n    text\n  }).show();\n};\n\nconst customEvent = (event, detail = {}, parent = window) => {\n  const e = new CustomEvent(event, {\n    detail\n  });\n  parent.dispatchEvent(e);\n};\n\nconst arrayUniqueByKey = (array, key) => [...new Map(array.map(item => [item[key], item])).values()];\n\nmodule.exports = {\n  request,\n  truncate,\n  toast,\n  customEvent,\n  arrayUniqueByKey\n};\n\n//# sourceURL=webpack://file-manager/./src/resources/js/utils.js?");

/***/ }),

/***/ "./src/resources/sass/style.scss":
/*!***************************************!*\
  !*** ./src/resources/sass/style.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://file-manager/./src/resources/sass/style.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/resources/js/app.js");
/******/ 	
/******/ })()
;